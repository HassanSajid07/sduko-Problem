from tenner_csp import *
from propagators import *
import random

def generate_random_grid(rows, cols):
    grid = [[-1 for _ in range(cols)] for _ in range(rows)]
    total = random.randint(0, 99)
    for i in range(rows-1):
        for j in range(cols):
            grid[i][j] = random.randint(0, 9)
            total -= grid[i][j]
    grid[rows-1] = [random.randint(0, 9) for _ in range(cols)]
    grid[rows-1][cols-1] = total if total >= 0 else random.randint(0, 9)
    return grid

def solve_grid(grid, algorithm):
    csp, var_array = tenner_csp_model_1(grid)
    solver = BT(csp)
    start_time = time.time()
    solver.bt_search(algorithm)
    end_time = time.time()
    elapsed_time = end_time - start_time
    solution = [var.get_assigned_value() for row in var_array for var in row]
    return elapsed_time, solution

def print_tenner_soln(solution):
    for row in solution:
        print(' '.join(str(num) for num in row))


if __name__ == "__main__":
    random.seed(42)  # Set the random seed for reproducibility
    num_runs = 5

    algorithms = {
        "BT": prop_BT,
        "BT_MRV": prop_BT_MRV,
        "FC": prop_FC,
        "FC_MRV": prop_FC_MRV
    }

    grids = [generate_random_grid(5, 10) for _ in range(num_runs)]

    for algorithm_name, algorithm in algorithms.items():
        print(f"Running {algorithm_name}:")
        total_time = 0
        best_solution = None
        for grid_num, grid in enumerate(grids, 1):
            print(f"Grid {grid_num}:")
            elapsed_time, solution = solve_grid(grid, algorithm)
            total_time += elapsed_time
            print(f"Elapsed Time: {elapsed_time:.6f} seconds")
            if best_solution is None or elapsed_time < best_solution[0]:
                best_solution = (elapsed_time, solution)
        avg_time = total_time / num_runs
        print(f"Average Time: {avg_time:.6f} seconds")
        print("Best Solution:")
        print_tenner_soln(best_solution[1])
        print("=======================================================")
